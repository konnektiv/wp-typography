<?php

/**
 * Include debug helpers.
 */
require_once dirname( __DIR__ ) . '/php-typography/php-typography-debug.php';

/**
 * Autoloading.
 */
require_once dirname( __DIR__ ) . '/php-typography/php-typography-autoload.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-11-08 at 13:00:19.
 *
 * @coversDefaultClass \PHP_Typography\PHP_Typography
 */
class PHP_Typography_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var PHP_Typography
     */
    protected $typo;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->typo = new \PHP_Typography\PHP_Typography( false );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Return encoded HTML string (everything except <>"').
     *
     * @param string $html
     */
    protected function clean_html( $html ) {
    	$convmap = array(0x80, 0x10ffff, 0, 0xffffff);

    	return str_replace( array('&lt;', '&gt;'), array('<', '>'), mb_encode_numericentity( htmlentities( $html, ENT_NOQUOTES, 'UTF-8', false ), $convmap ) );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_defaults
     * @todo   Implement testSet_defaults().
     */
    public function testSet_defaults()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_tags_to_ignore
     */
    public function testSet_tags_to_ignore()
    {
    	$typo = $this->typo;
    	$always_ignore = array( 'iframe', 'textarea', 'button', 'select', 'optgroup', 'option', 'map',
    							'style', 'head', 'title', 'script', 'applet', 'object', 'param' );
    	$self_closing_tags = array('area', 'base', 'basefont', 'br', 'frame', 'hr', 'img', 'input', 'link', 'meta');

    	// default tags
		$typo->set_tags_to_ignore( array( 'code', 'head', 'kbd', 'object', 'option', 'pre',	'samp',
												  'script',	'noscript',	'noembed', 'select', 'style', 'textarea',
												  'title',	'var', 'math' ) );
		$this->assertArraySubset( array( 'code', 'head', 'kbd', 'object', 'option',	'pre', 'samp',
										 'script', 'noscript', 'noembed', 'select', 'style', 'textarea',
 								 		 'title', 'var', 'math' ), $typo->settings['ignoreTags'] );
		foreach ( $always_ignore as $tag ) {
			$this->assertContains( $tag, $typo->settings['ignoreTags'] );
		}
		foreach ( $self_closing_tags as $tag ) {
			$this->assertNotContains( $tag, $typo->settings['ignoreTags'] );
		}

		// auto-close tag and something else
		$typo->set_tags_to_ignore( array( 'img', 'foo' ) );
 		$this->assertContains( 'foo', $typo->settings['ignoreTags'] );
    	foreach ( $self_closing_tags as $tag ) {
			$this->assertNotContains( $tag, $typo->settings['ignoreTags'] );
		}
		foreach ( $always_ignore as $tag ) {
			$this->assertContains( $tag, $typo->settings['ignoreTags'] );
		}

		$typo->set_tags_to_ignore( "img foo  \    " ); // should not result in an error

		$html = '<p><foo>Ignore this "quote",</foo><span class="other"> but not "this" one.</span></p>';
		$expected = '<p><foo>Ignore this "quote",</foo><span class="other"> but not &ldquo;this&rdquo; one.</span></p>';
		$this->typo->set_smart_quotes( true );
		$this->assertSame( $expected, $this->clean_html( $typo->process( $html ) ) );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_classes_to_ignore
     */
    public function testSet_classes_to_ignore()
    {
		$typo = $this->typo;

		$typo->set_classes_to_ignore( 'foo bar' );
		$this->assertContains( 'foo', $this->typo->settings['ignoreClasses'] );
		$this->assertContains( 'bar', $this->typo->settings['ignoreClasses'] );

		$html = '<p><span class="foo">Ignore this "quote",</span><span class="other"> but not "this" one.</span></p>
			     <p class="bar">"This" should also be ignored. <span>And "this".</span></p>
				 <p><span>"But" not this.</span></p>';
		$expected = '<p><span class="foo">Ignore this "quote",</span><span class="other"> but not &ldquo;this&rdquo; one.</span></p>
			     <p class="bar">"This" should also be ignored. <span>And "this".</span></p>
				 <p><span>&ldquo;But&rdquo; not this.</span></p>';
		$this->typo->set_smart_quotes( true );
		$this->assertSame( $expected, $this->clean_html( $typo->process( $html ) ) );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_ids_to_ignore
     */
    public function testSet_ids_to_ignore()
    {
		$typo = $this->typo;

		$typo->set_ids_to_ignore( 'foobar barfoo' );
		$this->assertContains( 'foobar', $this->typo->settings['ignoreIDs'] );
		$this->assertContains( 'barfoo', $this->typo->settings['ignoreIDs'] );

		$html = '<p><span id="foobar">Ignore this "quote",</span><span class="other"> but not "this" one.</span></p>
			     <p id="barfoo">"This" should also be ignored. <span>And "this".</span></p>
				 <p><span>"But" not this.</span></p>';
		$expected = '<p><span id="foobar">Ignore this "quote",</span><span class="other"> but not &ldquo;this&rdquo; one.</span></p>
			     <p id="barfoo">"This" should also be ignored. <span>And "this".</span></p>
				 <p><span>&ldquo;But&rdquo; not this.</span></p>';
		$this->typo->set_smart_quotes( true );
		$this->assertSame( $expected, $this->clean_html( $typo->process( $html ) ) );
    }

    /**
     * Integrate all three "ignore" variants.
     *
	 * @covers \PHP_Typography\PHP_Typography::set_classes_to_ignore
     * @covers \PHP_Typography\PHP_Typography::set_ids_to_ignore
     * @covers \PHP_Typography\PHP_Typography::set_tags_to_ignore
     *
     * @depends testSet_ids_to_ignore
     * @depends testSet_classes_to_ignore
     * @depends testSet_tags_to_ignore
     */
    public function testComplete_ignore() {
    	$typo = $this->typo;

    	$typo->set_ids_to_ignore( 'foobar barfoo' );
    	$typo->set_classes_to_ignore( 'foo bar' );
    	$typo->set_tags_to_ignore( array( 'img', 'foo' ) );

    	$html = '<p><span class="foo">Ignore this "quote",</span><span class="other"> but not "this" one.</span></p>
			     <p class="bar">"This" should also be ignored. <span>And "this".</span></p>
				 <p><span>"But" not this.</span></p>';
    	$expected = '<p><span class="foo">Ignore this "quote",</span><span class="other"> but not &ldquo;this&rdquo; one.</span></p>
			     <p class="bar">"This" should also be ignored. <span>And "this".</span></p>
				 <p><span>&ldquo;But&rdquo; not this.</span></p>';
    	$typo->set_smart_quotes( true );
    	$this->assertSame( $expected, $this->clean_html( $typo->process( $html ) ) );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_quotes
     */
    public function testSet_smart_quotes()
    {
		$this->typo->set_smart_quotes( true );
		$this->assertTrue( $this->typo->settings['smartQuotes'] );

		$this->typo->set_smart_quotes( false );
		$this->assertFalse( $this->typo->settings['smartQuotes'] );
    }

    /**
     * @covers ::set_smart_quotes_primary
     */
    public function testSet_smart_quotes_primary()
    {
        $typo = $this->typo;
    	$quote_styles = array(
    		'doubleCurled',
    		'doubleCurledReversed',
    		'doubleLow9',
    		'doubleLow9Reversed',
    		'singleCurled',
    		'singleCurledReversed',
    		'singleLow9',
    		'singleLow9Reversed',
    		'doubleGuillemetsFrench',
    		'doubleGuillemets',
    		'doubleGuillemetsReversed',
    		'singleGuillemets',
    		'singleGuillemetsReversed',
    		'cornerBrackets',
    		'whiteCornerBracket'
    	);

    	foreach ( $quote_styles as $style ) {
    		$typo->set_smart_quotes_primary( $style );
    		$this->assertSmartQuotesStyle( $style, $typo->chr['doubleQuoteOpen'], $typo->chr['doubleQuoteClose'] );
    	}
    }

    /**
     * @covers ::set_smart_quotes_primary
     *
     * @expectedException PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessageRegExp /^Invalid quote style \w+\.$/
     */
    public function testSet_smart_quotes_primary_invalid()
    {
    	$typo = $this->typo;

    	$typo->set_smart_quotes_primary( 'invalidStyleName' );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_quotes_secondary
     */
    public function testSet_smart_quotes_secondary()
    {
    	$typo = $this->typo;
    	$quote_styles = array(
    		'doubleCurled',
    		'doubleCurledReversed',
    		'doubleLow9',
    		'doubleLow9Reversed',
    		'singleCurled',
    		'singleCurledReversed',
    		'singleLow9',
    		'singleLow9Reversed',
    		'doubleGuillemetsFrench',
    		'doubleGuillemets',
    		'doubleGuillemetsReversed',
    		'singleGuillemets',
    		'singleGuillemetsReversed',
    		'cornerBrackets',
    		'whiteCornerBracket'
    	);

    	foreach ( $quote_styles as $style ) {
    		$typo->set_smart_quotes_secondary( $style );
    		$this->assertSmartQuotesSTyle( $style, $typo->chr['singleQuoteOpen'], $typo->chr['singleQuoteClose'] );
    	}
    }

    /**
     * Assert that the given quote styles match
     *
     * @param string $style
     * @param string $open
     * @param string $close
     */
	private function assertSmartQuotesStyle( $style, $open, $close ) {
    	switch ( $style ) {
    		case 'doubleCurled':
    			$this->assertSame( \PHP_Typography\uchr(8220), $open, "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(8221), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'doubleCurledReversed':
    			$this->assertSame( \PHP_Typography\uchr(8221), $open,  "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(8221), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'doubleLow9':
    			$this->assertSame( \PHP_Typography\uchr(8222), $open, "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(8221), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'doubleLow9Reversed':
    			$this->assertSame( \PHP_Typography\uchr(8222), $open, "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(8220), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'singleCurled':
    			$this->assertSame( \PHP_Typography\uchr(8216), $open, "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(8217), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'singleCurledReversed':
    			$this->assertSame( \PHP_Typography\uchr(8217), $open, "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(8217), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'singleLow9':
    			$this->assertSame( \PHP_Typography\uchr(8218), $open,  "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(8217), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'singleLow9Reversed':
    			$this->assertSame( \PHP_Typography\uchr(8218), $open, "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(8216), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'doubleGuillemetsFrench':
    			$this->assertSame( \PHP_Typography\uchr(171) . \PHP_Typography\uchr(160), $open, "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(160) . \PHP_Typography\uchr(187), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'doubleGuillemets':
    			$this->assertSame( \PHP_Typography\uchr(171), $open, "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(187), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'doubleGuillemetsReversed':
    			$this->assertSame( \PHP_Typography\uchr(187), $open, "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(171), $close, "Closeing quote $close did not match quote style $style." );
    			break;

    		case 'singleGuillemets':
    			$this->assertSame( \PHP_Typography\uchr(8249), $open, "Opening quote $open did not match quote style $style." );
    			$this->assertSame( \PHP_Typography\uchr(8250), $close, "Closeing quote $close did not match quote style $style." );
    			break;

   			case 'singleGuillemetsReversed':
   				$this->assertSame( \PHP_Typography\uchr(8250), $open, "Opening quote $open did not match quote style $style." );
   				$this->assertSame( \PHP_Typography\uchr(8249), $close, "Closeing quote $close did not match quote style $style." );
   				break;

   			case 'cornerBrackets':
   				$this->assertSame( \PHP_Typography\uchr(12300), $open, "Opening quote $open did not match quote style $style." );
   				$this->assertSame( \PHP_Typography\uchr(12301), $close, "Closeing quote $close did not match quote style $style." );
   				break;

   			case 'whiteCornerBracket':
   				$this->assertSame( \PHP_Typography\uchr(12302), $open, "Opening quote $open did not match quote style $style." );
   				$this->assertSame( \PHP_Typography\uchr(12303), $close, "Closeing quote $close did not match quote style $style." );
   				break;

    		default:
    			$this->assertTrue( false, "Invalid quote style $style." );
    	}
    }


    /**
     * @covers ::set_smart_quotes_secondary
     *
     * @expectedException PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessageRegExp /^Invalid quote style \w+\.$/
     */
    public function testSet_smart_quotes_secondary_invalid()
    {
    	$typo = $this->typo;

    	$typo->set_smart_quotes_secondary( 'invalidStyleName' );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_dashes
     */
    public function testSet_smart_dashes()
    {
		$this->typo->set_smart_dashes( true );
		$this->assertTrue( $this->typo->settings['smartDashes'] );

		$this->typo->set_smart_dashes( false );
		$this->assertFalse( $this->typo->settings['smartDashes'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_dashes_style
     */
    public function testSet_smart_dashes_style()
    {
		$typo = $this->typo;

		$typo->set_smart_dashes_style( 'traditionalUS' );
		$this->assertEquals( $typo->chr['emDash'], $typo->chr['parentheticalDash'] );
		$this->assertEquals( $typo->chr['enDash'], $typo->chr['intervalDash'] );
		$this->assertEquals( $typo->chr['thinSpace'], $typo->chr['parentheticalDashSpace'] );
		$this->assertEquals( $typo->chr['thinSpace'], $typo->chr['intervalDashSpace'] );

		$typo->set_smart_dashes_style( 'international' );
		$this->assertEquals( $typo->chr['enDash'], $typo->chr['parentheticalDash'] );
		$this->assertEquals( $typo->chr['enDash'], $typo->chr['intervalDash'] );
		$this->assertEquals( ' ', $typo->chr['parentheticalDashSpace'] );
		$this->assertEquals( $typo->chr['hairSpace'], $typo->chr['intervalDashSpace'] );
    }

    /**
     * @covers ::set_smart_dashes_style
     *
     * @expectedException PHPUnit_Framework_Error_Warning
     * @expectedExceptionMessageRegExp /^Invalid dash style \w+.$/
     */
    public function testSet_smart_dashes_style_invalid()
    {
    	$typo = $this->typo;

    	$typo->set_smart_dashes_style( 'invalidStyleName' );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_ellipses
     */
    public function testSet_smart_ellipses()
    {
		$this->typo->set_smart_ellipses( true );
		$this->assertTrue( $this->typo->settings['smartEllipses'] );

		$this->typo->set_smart_ellipses( false );
		$this->assertFalse( $this->typo->settings['smartEllipses'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_diacritics
     * @todo   Implement testSet_smart_diacritics().
     */
    public function testSet_smart_diacritics()
    {
		$this->typo->set_smart_diacritics( true );
		$this->assertTrue( $this->typo->settings['smartDiacritics'] );

		$this->typo->set_smart_diacritics( false );
		$this->assertFalse( $this->typo->settings['smartDiacritics'] );
    }

    /**
     * @covers ::set_diacritic_language
	 * @covers ::update_diacritics_replacement_arrays
     */
    public function testSet_diacritic_language()
    {
		$this->typo->set_diacritic_language( 'en-US' );
		$this->assertGreaterThan( 0, count( $this->typo->settings['diacriticWords'] ) );

		$this->typo->set_diacritic_language( 'foobar' );
		$this->assertFalse( isset( $this->typo->settings['diacriticWords'] ) );

		$this->typo->set_diacritic_language( 'de-DE' );
		$this->assertTrue( isset( $this->typo->settings['diacriticWords'] ) );
		$this->assertGreaterThan( 0, count( $this->typo->settings['diacriticWords'] ) );

		// nothing changed since the last call
		$this->typo->set_diacritic_language( 'de-DE' );
		$this->assertTrue( isset( $this->typo->settings['diacriticWords'] ) );
		$this->assertGreaterThan( 0, count( $this->typo->settings['diacriticWords'] ) );
    }

    /**
     * @covers ::set_diacritic_custom_replacements
     * @covers ::update_diacritics_replacement_arrays
     */
    public function testSet_diacritic_custom_replacements()
    {
    	$typo = $this->typo;

    	$typo->set_diacritic_custom_replacements( '"foo" => "fóò", "bar" => "bâr"' . ", 'ha' => 'hä'" );
     	$this->assertArrayHasKey( 'foo', $typo->settings['diacriticCustomReplacements'] );
     	$this->assertArrayHasKey( 'bar', $typo->settings['diacriticCustomReplacements'] );
     	$this->assertArrayHasKey( 'ha', $typo->settings['diacriticCustomReplacements'] );
     	$this->assertContains( 'fóò', $typo->settings['diacriticCustomReplacements'] );
     	$this->assertContains( 'bâr', $typo->settings['diacriticCustomReplacements'] );
     	$this->assertContains( 'hä', $typo->settings['diacriticCustomReplacements'] );

     	$typo->set_diacritic_custom_replacements( array( 'fööbar' => 'fúbar' ) );
     	$this->assertArrayNotHasKey( 'foo', $typo->settings['diacriticCustomReplacements'] );
     	$this->assertArrayNotHasKey( 'bar', $typo->settings['diacriticCustomReplacements'] );
     	$this->assertArrayHasKey( 'fööbar', $typo->settings['diacriticCustomReplacements'] );
     	$this->assertContains( 'fúbar', $typo->settings['diacriticCustomReplacements'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_marks
     */
    public function testSet_smart_marks()
    {
		$this->typo->set_smart_marks( true );
		$this->assertTrue( $this->typo->settings['smartMarks'] );

		$this->typo->set_smart_marks( false );
		$this->assertFalse( $this->typo->settings['smartMarks'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_math
     */
    public function testSet_smart_math()
    {
		$this->typo->set_smart_math( true );
		$this->assertTrue( $this->typo->settings['smartMath'] );

		$this->typo->set_smart_math( false );
		$this->assertFalse( $this->typo->settings['smartMath'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_exponents
     */
    public function testSet_smart_exponents()
    {
		$this->typo->set_smart_exponents( true );
		$this->assertTrue( $this->typo->settings['smartExponents'] );

		$this->typo->set_smart_exponents( false );
		$this->assertFalse( $this->typo->settings['smartExponents'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_fractions
     */
    public function testSet_smart_fractions()
    {
		$this->typo->set_smart_fractions( true );
		$this->assertTrue( $this->typo->settings['smartFractions'] );

		$this->typo->set_smart_fractions( false );
		$this->assertFalse( $this->typo->settings['smartFractions'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_smart_ordinal_suffix
     */
    public function testSet_smart_ordinal_suffix()
    {
		$this->typo->set_smart_ordinal_suffix( true );
		$this->assertTrue( $this->typo->settings['smartOrdinalSuffix'] );

		$this->typo->set_smart_ordinal_suffix( false );
		$this->assertFalse( $this->typo->settings['smartOrdinalSuffix'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_single_character_word_spacing
     */
    public function testSet_single_character_word_spacing()
    {
		$this->typo->set_single_character_word_spacing( true );
		$this->assertTrue( $this->typo->settings['singleCharacterWordSpacing'] );

		$this->typo->set_single_character_word_spacing( false );
		$this->assertFalse( $this->typo->settings['singleCharacterWordSpacing'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_fraction_spacing
     */
    public function testSet_fraction_spacing()
    {
		$this->typo->set_fraction_spacing( true );
		$this->assertTrue( $this->typo->settings['fractionSpacing'] );

		$this->typo->set_fraction_spacing( false );
		$this->assertFalse( $this->typo->settings['fractionSpacing'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_unit_spacing
     */
    public function testSet_unit_spacing()
    {
		$this->typo->set_unit_spacing( true );
		$this->assertTrue( $this->typo->settings['unitSpacing'] );

		$this->typo->set_unit_spacing( false );
		$this->assertFalse( $this->typo->settings['unitSpacing'] );
    }

    /**
     * @covers ::set_units
     * @covers ::update_unit_pattern
     */
    public function testSet_units()
    {
    	$units_as_array = array( 'foo', 'bar', 'xx/yy');
    	$units_as_string = implode( ', ', $units_as_array );

		$this->typo->set_units( $units_as_array );
		foreach( $units_as_array as $unit ) {
			$this->assertContains( $unit, $this->typo->settings['units'] );
		}

		$this->typo->set_units( array() );
		foreach( $units_as_array as $unit ) {
			$this->assertNotContains( $unit, $this->typo->settings['units'] );
		}

		$this->typo->set_units( $units_as_string );
		foreach( $units_as_array as $unit ) {
			$this->assertContains( $unit, $this->typo->settings['units'] );
		}
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_dash_spacing
     */
    public function testSet_dash_spacing()
    {
		$this->typo->set_dash_spacing( true );
		$this->assertTrue( $this->typo->settings['dashSpacing'] );

		$this->typo->set_dash_spacing( false );
		$this->assertFalse( $this->typo->settings['dashSpacing'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_space_collapse
     */
    public function testSet_space_collapse()
    {
		$this->typo->set_space_collapse( true );
		$this->assertTrue( $this->typo->settings['spaceCollapse'] );

		$this->typo->set_space_collapse( false );
		$this->assertFalse( $this->typo->settings['spaceCollapse'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_dewidow
     */
    public function testSet_dewidow()
    {
		$this->typo->set_dewidow( true );
		$this->assertTrue( $this->typo->settings['dewidow'] );

		$this->typo->set_dewidow( false );
		$this->assertFalse( $this->typo->settings['dewidow'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_max_dewidow_length
     */
    public function testSet_max_dewidow_length()
    {
		$this->typo->set_max_dewidow_length( 10 );
		$this->assertSame( 10, $this->typo->settings['dewidowMaxLength'] );

		$this->typo->set_max_dewidow_length( 1 );
		$this->assertSame( 5, $this->typo->settings['dewidowMaxLength'] );

		$this->typo->set_max_dewidow_length( 2 );
		$this->assertSame( 2, $this->typo->settings['dewidowMaxLength'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_max_dewidow_pull
     */
    public function testSet_max_dewidow_pull()
    {
		$this->typo->set_max_dewidow_pull( 10 );
		$this->assertSame( 10, $this->typo->settings['dewidowMaxPull'] );

		$this->typo->set_max_dewidow_pull( 1 );
		$this->assertSame( 5, $this->typo->settings['dewidowMaxPull'] );

		$this->typo->set_max_dewidow_pull( 2 );
		$this->assertSame( 2, $this->typo->settings['dewidowMaxPull'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_wrap_hard_hyphens
     */
    public function testSet_wrap_hard_hyphens()
    {
		$this->typo->set_wrap_hard_hyphens( true );
		$this->assertTrue( $this->typo->settings['hyphenHardWrap'] );

		$this->typo->set_wrap_hard_hyphens( false );
		$this->assertFalse( $this->typo->settings['hyphenHardWrap'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_url_wrap
     */
    public function testSet_url_wrap()
    {
		$this->typo->set_url_wrap( true );
		$this->assertTrue( $this->typo->settings['urlWrap'] );

		$this->typo->set_url_wrap( false );
		$this->assertFalse( $this->typo->settings['urlWrap'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_email_wrap
     */
    public function testSet_email_wrap()
    {
		$this->typo->set_email_wrap( true );
		$this->assertTrue( $this->typo->settings['emailWrap'] );

		$this->typo->set_email_wrap( false );
		$this->assertFalse( $this->typo->settings['emailWrap'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_min_after_url_wrap
     */
    public function testSet_min_after_url_wrap()
    {
		$this->typo->set_min_after_url_wrap( 10 );
		$this->assertSame( 10, $this->typo->settings['urlMinAfterWrap'] );

		$this->typo->set_min_after_url_wrap( 0 );
		$this->assertSame( 5, $this->typo->settings['urlMinAfterWrap'] );

		$this->typo->set_min_after_url_wrap( 1 );
		$this->assertSame( 1, $this->typo->settings['urlMinAfterWrap'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_style_ampersands
     */
    public function testSet_style_ampersands()
    {
		$this->typo->set_style_ampersands( true );
		$this->assertTrue( $this->typo->settings['styleAmpersands'] );

		$this->typo->set_style_ampersands( false );
		$this->assertFalse( $this->typo->settings['styleAmpersands'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_style_caps
     */
    public function testSet_style_caps()
    {
		$this->typo->set_style_caps( true );
		$this->assertTrue( $this->typo->settings['styleCaps'] );

		$this->typo->set_style_caps( false );
		$this->assertFalse( $this->typo->settings['styleCaps'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_style_initial_quotes
     */
    public function testSet_style_initial_quotes()
    {
		$this->typo->set_style_initial_quotes( true );
		$this->assertTrue( $this->typo->settings['styleInitialQuotes'] );

		$this->typo->set_style_initial_quotes( false );
		$this->assertFalse( $this->typo->settings['styleInitialQuotes'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_style_numbers
     */
    public function testSet_style_numbers()
    {
		$this->typo->set_style_numbers( true );
		$this->assertTrue( $this->typo->settings['styleNumbers'] );

		$this->typo->set_style_numbers( false );
		$this->assertFalse( $this->typo->settings['styleNumbers'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_initial_quote_tags
     */
    public function testSet_initial_quote_tags()
    {
       	$tags_as_array = array( 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'div' );
    	$tags_as_string = implode( ', ', $tags_as_array );

		$this->typo->set_initial_quote_tags( $tags_as_array );
		foreach( $tags_as_array as $tag ) {
			$this->assertArrayHasKey( $tag, $this->typo->settings['initialQuoteTags'] );
		}

		$this->typo->set_initial_quote_tags( array() );
		foreach( $tags_as_array as $tag ) {
			$this->assertArrayNotHasKey( $tag, $this->typo->settings['initialQuoteTags'] );
		}

		$this->typo->set_initial_quote_tags( $tags_as_string );
		foreach( $tags_as_array as $tag ) {
			$this->assertArrayHasKey( $tag, $this->typo->settings['initialQuoteTags'] );
		}
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_hyphenation
     */
    public function testSet_hyphenation()
    {
		$this->typo->set_hyphenation( true );
		$this->assertTrue( $this->typo->settings['hyphenation'] );

		$this->typo->set_hyphenation( false );
		$this->assertFalse( $this->typo->settings['hyphenation'] );
    }

    /**
     * @covers ::set_hyphenation_language
     */
    public function testSet_hyphenation_language()
    {
		$this->typo->set_hyphenation_language( 'en-US' );
		$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPattern'] ) );
		$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPatternMaxSegment'] ) );
		$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPatternExceptions'] ) );

		$this->typo->set_hyphenation_language( 'foobar' );
		$this->assertFalse( isset( $this->typo->settings['hyphenationPattern'] ) );
		$this->assertFalse( isset( $this->typo->settings['hyphenationPatternMaxSegment'] ) );
		$this->assertFalse( isset( $this->typo->settings['hyphenationPatternExceptions'] ) );

		$this->typo->set_hyphenation_language( 'no' );
		$this->assertTrue( isset( $this->typo->settings['hyphenationPattern'] ) );
		$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPattern'] ) );
		$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPatternMaxSegment'] ) );
		$this->assertNotEmpty( $this->typo->settings['hyphenationPatternExceptions'] ); // Norwegian has exceptions

		$this->typo->set_hyphenation_language( 'de' );
		$this->assertTrue( isset( $this->typo->settings['hyphenationPattern'] ) );
		$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPattern'] ) );
		$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPatternMaxSegment'] ) );
		$this->assertEmpty( $this->typo->settings['hyphenationPatternExceptions'] ); // no exceptions in the German pattern file
    }

    /**
     * @covers ::set_hyphenation_language
     */
    public function testSet_same_hyphenation_language()
    {
    	$this->typo->set_hyphenation_language( 'en-US' );
    	$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPattern'] ) );
    	$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPatternMaxSegment'] ) );
    	$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPatternExceptions'] ) );

    	$this->typo->set_hyphenation_language( 'en-US' );
    	$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPattern'] ) );
    	$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPatternMaxSegment'] ) );
    	$this->assertGreaterThan( 0, count( $this->typo->settings['hyphenationPatternExceptions'] ) );
    }

    /**
     * @covers ::set_min_length_hyphenation
     */
    public function testSet_min_length_hyphenation()
    {
		$this->typo->set_min_length_hyphenation( 1 ); // too low, resets to default 5
		$this->assertSame( 5, $this->typo->settings['hyphenMinLength'] );

		$this->typo->set_min_length_hyphenation( 2 );
		$this->assertSame( 2, $this->typo->settings['hyphenMinLength'] );

		$this->typo->set_min_length_hyphenation( 66 );
		$this->assertSame( 66, $this->typo->settings['hyphenMinLength'] );
    }

    /**
     * @covers ::set_min_before_hyphenation
     */
    public function testSet_min_before_hyphenation()
    {
		$this->typo->set_min_before_hyphenation( 0 ); // too low, resets to default 3
		$this->assertSame( 3, $this->typo->settings['hyphenMinBefore'] );

		$this->typo->set_min_before_hyphenation( 1 );
		$this->assertSame( 1, $this->typo->settings['hyphenMinBefore'] );

		$this->typo->set_min_before_hyphenation( 66 );
		$this->assertSame( 66, $this->typo->settings['hyphenMinBefore'] );

    }

    /**
     * @covers ::set_min_after_hyphenation
     */
    public function testSet_min_after_hyphenation()
    {
		$this->typo->set_min_after_hyphenation( 0 ); // too low, resets to default 2
		$this->assertSame( 2, $this->typo->settings['hyphenMinAfter'] );

		$this->typo->set_min_after_hyphenation( 1 );
		$this->assertSame( 1, $this->typo->settings['hyphenMinAfter'] );

		$this->typo->set_min_after_hyphenation( 66 );
		$this->assertSame( 66, $this->typo->settings['hyphenMinAfter'] );
    }

    /**
     * @covers ::set_hyphenate_headings
     */
    public function testSet_hyphenate_headings()
    {
    	$this->typo->set_hyphenate_headings( true );
		$this->assertTrue( $this->typo->settings['hyphenateTitle'] );

		$this->typo->set_hyphenate_headings( false );
		$this->assertFalse( $this->typo->settings['hyphenateTitle'] );
    }

    /**
     * @covers ::set_hyphenate_all_caps
     */
    public function testSet_hyphenate_all_caps()
    {
    	$this->typo->set_hyphenate_all_caps( true );
		$this->assertTrue( $this->typo->settings['hyphenateAllCaps'] );

		$this->typo->set_hyphenate_all_caps( false );
		$this->assertFalse( $this->typo->settings['hyphenateAllCaps'] );
    }

    /**
     * @covers ::set_hyphenate_title_case
     */
    public function testSet_hyphenate_title_case()
    {
    	$this->typo->set_hyphenate_title_case( true );
		$this->assertTrue( $this->typo->settings['hyphenateTitleCase'] );

		$this->typo->set_hyphenate_title_case( false );
		$this->assertFalse( $this->typo->settings['hyphenateTitleCase'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_hyphenation_exceptions
     */
    public function testSet_hyphenation_exceptions_array()
    {
		$typo = $this->typo;
		$exceptions = array( "Hu-go", "Fö-ba-ß" );

		$typo->set_hyphenation_exceptions( $exceptions );
		$this->assertContainsOnly( 'string', $typo->settings['hyphenationCustomExceptions'] );
		$this->assertArraySubset( array( 'hugo' => 'hu-go' ), $typo->settings['hyphenationCustomExceptions'] );
		$this->assertArraySubset( array( 'föbaß' => 'fö-ba-ß' ), $typo->settings['hyphenationCustomExceptions'] );
		$this->assertCount( 2, $typo->settings['hyphenationCustomExceptions'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_hyphenation_exceptions
     */
    public function testSet_hyphenation_exceptions_string()
    {
    	$typo = $this->typo;
    	$exceptions = "Hu-go, Fö-ba-ß";

    	$typo->set_hyphenation_exceptions( $exceptions );
    	$this->assertContainsOnly( 'string', $typo->settings['hyphenationCustomExceptions'] );
    	$this->assertArraySubset( array( 'hugo' => 'hu-go' ), $typo->settings['hyphenationCustomExceptions'] );
    	$this->assertArraySubset( array( 'föbaß' => 'fö-ba-ß' ), $typo->settings['hyphenationCustomExceptions'] );
    	$this->assertCount( 2, $typo->settings['hyphenationCustomExceptions'] );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::get_hyphenation_languages
     */
    public function testGet_hyphenation_languages()
    {
    	$expected = array( 'bg', 'ca', 'cs', 'cy', 'da', 'de', 'el-Mono', 'el-Poly', 'en-GB', 'en-US',
    					   'es', 'et', 'eu', 'fi', 'fr', 'ga', 'gl', 'grc', 'hr', 'hu', 'ia', 'id', 'is',
    					   'it', 'la', 'lt', 'mn-Cyrl', 'no', 'pl', 'pt', 'ro', 'ru', 'sa', 'sh-Cyrl', 'sh-Latn',
    					   'sk', 'sl', 'sr-Cyrl', 'sv', 'tr', 'uk', 'zh-Latn' );
    	$not_expected = array( 'klingon', 'de-DE' );

    	$actual = $this->typo->get_hyphenation_languages();
		foreach( $expected as $lang_code ) {
			$this->assertArrayHasKey( $lang_code, $actual );
		}
		foreach( $not_expected as $lang_code ) {
			$this->assertArrayNotHasKey( $lang_code, $actual );
		}
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::get_diacritic_languages
     * @todo   Implement testGet_diacritic_languages().
     */
    public function testGet_diacritic_languages()
    {
       	$expected = array( 'de-DE', 'en-US' );
       	$not_expected = array( 'es', 'et', 'eu', 'fi', 'fr', 'ga', 'gl', 'grc', 'hr', 'hu', 'ia', 'id', 'is',
    					       'it', 'la', 'lt', 'mn-Cyrl', 'no', 'pl', 'pt', 'ro', 'ru', 'sa', 'sh-Cyrl', 'sh-Latn',
    					   	   'sk', 'sl', 'sr-Cyrl', 'sv', 'tr', 'uk', 'zh-Latn' );

       	$actual = $this->typo->get_diacritic_languages();
		foreach( $expected as $lang_code ) {
			$this->assertArrayHasKey( $lang_code, $actual );
		}
		foreach( $not_expected as $lang_code ) {
			$this->assertArrayNotHasKey( $lang_code, $actual );
		}
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::process
     * @todo   Implement testProcess().
     */
    public function testProcess()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::process_feed
     * @todo   Implement testProcess_feed().
     */
    public function testProcess_feed()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ::get_prev_chr
     * @covers ::get_previous_textnode
     */
    public function testGet_prev_chr()
    {
    	$typo = $this->typo;
    	$typo->process('');

    	$html = '<p><span>A</span><span id="foo">new hope.</span></p><p><span id="bar">The empire</span> strikes back.</p<';
    	$doc = $typo->html5_parser->loadHTML( $html );
    	$xpath = new DOMXPath( $doc );

    	$textnodes = $xpath->query( "//*[@id='foo']/text()" ); // really only one
		$prev_char = $typo->get_prev_chr( $textnodes->item( 0 ) );
		$this->assertSame( 'A', $prev_char );

		$textnodes = $xpath->query( "//*[@id='bar']/text()" ); // really only one
		$prev_char = $typo->get_prev_chr( $textnodes->item( 0 ) );
		$this->assertSame( '', $prev_char );
    }

    /**
     * @covers ::get_next_chr
     * @covers ::get_next_textnode
     */
    public function testGet_next_chr()
    {
    	$typo = $this->typo;
    	$typo->process('');

    	$html = '<p><span id="foo">A</span><span id="bar">new hope.</span></p><p><span>The empire</span> strikes back.</p<';
    	$doc = $typo->html5_parser->loadHTML( $html );
    	$xpath = new DOMXPath( $doc );

    	$textnodes = $xpath->query( "//*[@id='foo']/text()" ); // really only one
    	$prev_char = $typo->get_next_chr( $textnodes->item( 0 ) );
    	$this->assertSame( 'n', $prev_char );

    	$textnodes = $xpath->query( "//*[@id='bar']/text()" ); // really only one
    	$prev_char = $typo->get_next_chr( $textnodes->item( 0 ) );
    	$this->assertSame( '', $prev_char );
    }

    /**
     * @covers ::get_first_textnode
     */
    public function testGet_first_textnode()
    {
    	$typo = $this->typo;
    	$typo->process('');

    	$html = '<p><span id="foo">A</span><span id="bar">new hope.</span></p>';
    	$doc = $typo->html5_parser->loadHTML( $html );
    	$xpath = new DOMXPath( $doc );

    	$textnodes = $xpath->query( "//*[@id='foo']/text()" ); // really only one
    	$node = $typo->get_first_textnode( $textnodes->item( 0 ) );
    	$this->assertSame( 'A', $node->nodeValue );

    	$textnodes = $xpath->query( "//*[@id='foo']" ); // really only one
    	$node = $typo->get_first_textnode( $textnodes->item( 0 ) );
    	$this->assertSame( 'A', $node->nodeValue );

    	$textnodes = $xpath->query( "//*[@id='bar']" ); // really only one
    	$node = $typo->get_first_textnode( $textnodes->item( 0 ) );
    	$this->assertSame( 'new hope.', $node->nodeValue );

    	$textnodes = $xpath->query( "//p" ); // really only one
		$node = $typo->get_first_textnode( $textnodes->item( 0 ) );
    	$this->assertSame( 'A', $node->nodeValue );
    }

    /**
     * @covers ::get_first_textnode
     */
    public function testGet_first_textnode_null()
    {
    	$typo = $this->typo;
    	$typo->process('');

    	// passing null returns null
		$this->assertNull( $typo->get_first_textnode( null ) );

		// passing a DOMNode that is not a DOMElement or a DOMText returns null as well
		$this->assertNull( $typo->get_first_textnode( new DOMDocument() ) );
    }

    /**
     * @covers ::get_first_textnode
     */
    public function testGet_first_textnode_only_block_level()
    {
       	$typo = $this->typo;
    	$typo->process('');

    	$html = '<div><div id="foo">No</div><div id="bar">hope</div></div>';
    	$doc = $typo->html5_parser->loadHTML( $html );
    	$xpath = new DOMXPath( $doc );

    	$textnodes = $xpath->query( "//div" ); // really only one
    	$node = $typo->get_first_textnode( $textnodes->item( 0 ) );
    	$this->assertNull( $node );
    }


    /**
     * @covers ::get_last_textnode
     */
    public function testGet_last_textnode()
    {
    	$typo = $this->typo;
    	$typo->process('');

    	$html = '<p><span id="foo">A</span><span id="bar">new hope.</span> Really.</p>';
    	$doc = $typo->html5_parser->loadHTML( $html );
    	$xpath = new DOMXPath( $doc );

    	$textnodes = $xpath->query( "//*[@id='foo']/text()" ); // really only one
    	$node = $typo->get_last_textnode( $textnodes->item( 0 ) );
    	$this->assertSame( 'A', $node->nodeValue );

    	$textnodes = $xpath->query( "//*[@id='foo']" ); // really only one
    	$node = $typo->get_last_textnode( $textnodes->item( 0 ) );
    	$this->assertSame( 'A', $node->nodeValue );

    	$textnodes = $xpath->query( "//*[@id='bar']" ); // really only one
    	$node = $typo->get_first_textnode( $textnodes->item( 0 ) );
    	$this->assertSame( 'new hope.', $node->nodeValue );

    	$textnodes = $xpath->query( "//p" ); // really only one
		$node = $typo->get_last_textnode( $textnodes->item( 0 ) );
    	$this->assertSame( ' Really.', $node->nodeValue );
    }

    /**
     * @covers ::get_last_textnode
     */
    public function testGet_last_textnode_null()
    {
    	$typo = $this->typo;
    	$typo->process('');

    	// passing null returns null
    	$this->assertNull( $typo->get_last_textnode( null ) );

    	// passing a DOMNode that is not a DOMElement or a DOMText returns null as well
		$this->assertNull( $typo->get_last_textnode( new DOMDocument() ) );
    }

    /**
     * @covers ::get_last_textnode
     */
    public function testGet_last_textnode_only_block_level()
    {
    	$typo = $this->typo;
    	$typo->process('');

    	$html = '<div><div id="foo">No</div><div id="bar">hope</div></div>';
    	$doc = $typo->html5_parser->loadHTML( $html );
    	$xpath = new DOMXPath( $doc );

    	$textnodes = $xpath->query( "//div" ); // really only one
    	$node = $typo->get_last_textnode( $textnodes->item( 0 ) );
    	$this->assertNull( $node );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::smart_quotes
     * @todo   Implement testSmart_quotes().
     */
    public function testSmart_quotes()
    {
		//$html = '<p><em>"I\'m pretty sure,"</em> she said, & "He said \'We are <em>family</em>\'".</p>';
		//$expected = '<p><em>&ldquo;';

    	$typo = $this->typo;

    	$typo->set_smart_quotes( true );

		$this->assertSame( "<span>&ldquo;Double&rdquo;, &lsquo;single&rsquo;</span>",
						   $this->clean_html( $typo->process( '<span>"Double", \'single\'</span>' ) ) );
		$this->assertSame( "<p>&ldquo;<em>This is nuts.</em>&rdquo;</p>",
						   $this->clean_html( $typo->process('<p>"<em>This is nuts.</em>"</p>') ) );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::smart_dashes
     */
    public function testSmart_dashes()
    {
		$typo = $this->typo;
		$typo->set_smart_dashes( true );

		$html_none = 'Vor- und Nachteile, i-Tüpfelchen, 100-jährig, Fritz-Walter-Stadion, 2015-12-03, 01-01-1999, 2012-04';
		$result_none = $html_none;

		$html_dashed       = 'Ein - mehr oder weniger - guter Gedanke, 1908-2008';
		$result_dashed     = 'Ein &mdash; mehr oder weniger &mdash; guter Gedanke, 1908&ndash;2008';
		$result_dashed_int = 'Ein &ndash; mehr oder weniger &ndash; guter Gedanke, 1908&ndash;2008';

		$html_emdashed   = "We just don't know --- really---, but you know, --";
		$result_emdashed = "We just don't know &mdash; really&mdash;, but you know, &ndash;";

		$html_special        = "Here we are now&nbsp;-- we're&thinsp;-&thinsp;";
		$result_special      = "Here we are now&nbsp;&mdash; we're&thinsp;&mdash;&thinsp;";
		$result_special_int  = "Here we are now&nbsp;&ndash; we're&thinsp;&ndash;&thinsp;";

		$typo->set_smart_dashes_style( 'traditionalUS' );
		$this->assertSame( $result_none, $typo->process( $html_none ) );
		$this->assertSame( $result_dashed, $this->clean_html( $typo->process( $html_dashed ) ) );
		$this->assertSame( $result_emdashed, $this->clean_html( $typo->process( $html_emdashed ) ) );
		$this->assertSame( $result_special, $this->clean_html( $typo->process( $html_special ) ) );

		$typo->set_smart_dashes_style( 'international' );
		$this->assertSame( $result_none, $typo->process( $html_none ) );
		$this->assertSame( $result_dashed_int, $this->clean_html( $typo->process( $html_dashed ) ) );
		$this->assertSame( $result_emdashed, $this->clean_html( $typo->process( $html_emdashed ) ) );
		$this->assertSame( $result_special_int, $this->clean_html( $typo->process( $html_special ) ) );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::smart_ellipses
     * @todo   Implement testSmart_ellipses().
     */
    public function testSmart_ellipses()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::smart_diacritics
     */
    public function testSmart_diacritics()
    {
		$this->typo->set_smart_diacritics( true );
		$this->typo->set_diacritic_language( 'en-US' );

		$this->assertSame( $this->clean_html('<p>crème brûlée</p>'),
						   $this->clean_html( $this->typo->process('<p>creme brulee</p>') ) );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::translate_words
     * @todo   Implement testTranslate_words().
     */
    public function testTranslate_words()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::smart_marks
     * @todo   Implement testSmart_marks().
     */
    public function testSmart_marks()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::smart_math
     * @covers \PHP_Typography\PHP_Typography::_smart_math_callback
     */
    public function testSmart_math()
    {
    	$typo = $this->typo;

		$typo->set_smart_math( true );

		// standard equations
		$this->assertSame( 'xx 7&minus;3=4 xx', $this->clean_html( $typo->process('xx 7-3=4 xx') ) );
		$this->assertSame( 'xx 3&times;3=5&divide;2 xx', $this->clean_html( $typo->process('xx 3*3=5/2 xx') ) );

		// some changes should be reversed (not all)
		$this->assertSame( 'xx 0815-4711 xx', $typo->process( 'xx 0815-4711 xx' ) );
 		$this->assertSame( 'xx 1/2 xx', $typo->process( 'xx 1/2 xx') );
		$this->assertNotSame( 'xx 2001-13-12 xx', $typo->process( 'xx 2001-13-12 xx' ) ); // not a valid date
		$this->assertSame( 'xx 2001-12-13 xx', $typo->process('xx 2001-12-13 xx') );
		$this->assertNotSame( 'xx 2001-13-13 xx', $typo->process('xx 2001-13-13 xx') ); // not a valid date
		$this->assertSame( 'xx 13-12-2002 xx', $typo->process('xx 13-12-2002 xx') );
		$this->assertSame( 'xx 12-13-2002 xx', $typo->process('xx 12-13-2002 xx') );
		$this->assertNotSame( 'xx 13-13-2002 xx', $typo->process('xx 13-13-2002 xx') ); // not a valid date
		$this->assertSame( 'xx 2001-12 xx', $typo->process('xx 2001-12 xx') );
		$this->assertSame( 'xx 2001-13 xx', $typo->process('xx 2001-13 xx') ); // apparently a valid day count
		$this->assertSame( 'xx 2001-100 xx', $typo->process('xx 2001-100 xx') );
		$this->assertSame( 'xx 12/13/2010 xx', $typo->process('xx 12/13/2010 xx') );
		$this->assertSame( 'xx 13/12/2010 xx', $typo->process('xx 13/12/2010 xx') );
		$this->assertSame( 'xx 13&divide;13&divide;2010 xx', $this->clean_html( $typo->process('xx 13/13/2010 xx') ) ); // not a valid date
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::smart_exponents
     * @todo   Implement testSmart_exponents().
     */
    public function testSmart_exponents()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::smart_fractions
     */
    public function testSmart_fractions()
    {
		$typo = $this->typo;
		$typo->set_smart_fractions( true);

		$origin_one = '1/2 3/300 999/1000';
		$result_one = '<sup>1</sup>&frasl;<sub>2</sub> <sup>3</sup>&frasl;<sub>300</sub> <sup>999</sup>&frasl;<sub>1000</sub>';
		$this->assertSame( $result_one, $this->clean_html( $typo->process( $origin_one ) ) );

		$origin_two = '1/2 4/2015 1999/2000 999/1000';
		$result_two = '<sup>1</sup>&frasl;<sub>2</sub> 4/2015 1999/2000 <sup>999</sup>&frasl;<sub>1000</sub>';
		$this->assertSame( $result_two, $this->clean_html( $typo->process( $origin_two ) ) );

    }

    /**
     * @covers \PHP_Typography\PHP_Typography::smart_ordinal_suffix
     * @todo   Implement testSmart_ordinal_suffix().
     */
    public function testSmart_ordinal_suffix()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::single_character_word_spacing
     * @todo   Implement testSingle_character_word_spacing().
     */
    public function testSingle_character_word_spacing()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::dash_spacing
     */
    public function testDash_spacing()
    {
    	$typo = $this->typo;
    	$typo->set_smart_dashes( true );
    	$typo->set_dash_spacing( true );

    	$html_none = 'Vor- und Nachteile, i-Tüpfelchen, 100-jährig, Fritz-Walter-Stadion, 2015-12-03, 01-01-1999, 2012-04';
    	$result_none = $html_none;

    	$html_dashed       = 'Ein - mehr oder weniger - guter Gedanke, 1908-2008';
    	$result_dashed     = 'Ein&thinsp;&mdash;&thinsp;mehr oder weniger&thinsp;&mdash;&thinsp;guter Gedanke, 1908&thinsp;&ndash;&thinsp;2008';
    	$result_dashed_int = 'Ein &ndash; mehr oder weniger &ndash; guter Gedanke, 1908&#8202;&ndash;&#8202;2008';

    	$html_emdashed       = "We just don't know --- really---, but you know, --";
    	$result_emdashed     = "We just don't know&thinsp;&mdash;&thinsp;really&thinsp;&mdash;&thinsp;, but you know, &ndash;";
    	$result_emdashed_int = "We just don't know&#8202;&mdash;&#8202;really&#8202;&mdash;&#8202;, but you know, &ndash;";

    	$typo->set_smart_dashes_style( 'traditionalUS' );
    	$this->assertSame( $result_none, $typo->process( $html_none ) );
    	$this->assertSame( $result_dashed,   $this->clean_html( $typo->process( $html_dashed ) ) );
    	$this->assertSame( $result_emdashed, $this->clean_html( $typo->process( $html_emdashed ) ) );

    	$typo->set_smart_dashes_style( 'international' );
    	$this->assertSame( $result_none, $typo->process( $html_none ) );
    	$this->assertSame( $result_dashed_int, $this->clean_html( $typo->process( $html_dashed ) ) );
    	$this->assertSame( $result_emdashed_int,   $this->clean_html( $typo->process( $html_emdashed ) ) );


    }

    /**
     * @covers \PHP_Typography\PHP_Typography::space_collapse
     * @todo   Implement testSpace_collapse().
     */
    public function testSpace_collapse()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::unit_spacing
     * @todo   Implement testUnit_spacing().
     */
    public function testUnit_spacing()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::wrap_hard_hyphens
     * @todo   Implement testWrap_hard_hyphens().
     */
    public function testWrap_hard_hyphens()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::dewidow
     * @todo   Implement testDewidow().
     */
    public function testDewidow()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::_dewidow_callback
     * @todo   Implement test_dewidow_callback().
     */
    public function test_dewidow_callback()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::wrap_urls
     * @todo   Implement testWrap_urls().
     */
    public function testWrap_urls()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::wrap_emails
     * @todo   Implement testWrap_emails().
     */
    public function testWrap_emails()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::style_caps
     * @todo   Implement testStyle_caps().
     */
    public function testStyle_caps()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::set_inner_html
     * @todo   Implement testSet_inner_html().
     */
    public function testSet_inner_html()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::style_numbers
     * @todo   Implement testStyle_numbers().
     */
    public function testStyle_numbers()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::style_ampersands
     * @todo   Implement testStyle_ampersands().
     */
    public function testStyle_ampersands()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::style_initial_quotes
     * @todo   Implement testStyle_initial_quotes().
     */
    public function testStyle_initial_quotes()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::hyphenation_pattern_injection
     * @todo   Implement testHyphenation_pattern_injection().
     */
    public function testHyphenation_pattern_injection()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers ::hyphenate
     */
    public function testHyphenate_disabled()
    {
		$this->typo->set_hyphenation( false );
		$this->typo->set_hyphenation_language( 'en-US' );
		$this->typo->set_min_length_hyphenation(2);
		$this->typo->set_min_before_hyphenation(2);
		$this->typo->set_min_after_hyphenation(2);
		$this->typo->set_hyphenate_headings( true );
		$this->typo->set_hyphenate_all_caps( true );
		$this->typo->set_hyphenate_title_case( true ); // added in version 1.5
		$this->typo->set_hyphenation_exceptions( array( 'KING-desk' ) );

		$html = 'A few words to hyphenate, like KINGdesk. Really, there should be no hyphenation here!';
    	$this->assertSame( $html, $this->clean_html( $this->typo->process( $html ) ) );
    }

    /**
     * @covers ::hyphenate
     * @covers ::do_hyphenate
     * @covers ::hyphenation_pattern_injection
     */
    public function testHyphenate()
    {
    	$this->typo->set_hyphenation( true );
    	$this->typo->set_hyphenation_language( 'en-US' );
    	$this->typo->set_min_length_hyphenation(2);
    	$this->typo->set_min_before_hyphenation(2);
    	$this->typo->set_min_after_hyphenation(2);
    	$this->typo->set_hyphenate_headings( true );
    	$this->typo->set_hyphenate_all_caps( true );
    	$this->typo->set_hyphenate_title_case( true ); // added in version 1.5
    	$this->typo->set_hyphenation_exceptions( array( 'KING-desk' ) );

    	/*	$this->assertSame( "This is a paragraph with no embedded hyphenation hints and no hyphen-related CSS applied. Corporate gibberish follows. Think visionary. If you generate proactively, you may have to e-enable interactively. We apply the proverb \"Grass doesn't grow on a racetrack\" not only to our re-purposing but our power to matrix. If all of this comes off as dumbfounding to you, that's because it is! Our feature set is unparalleled in the industry, but our reality-based systems and simple use is usually considered a remarkable achievement. The power to brand robustly leads to the aptitude to embrace seamlessly. What do we streamline? Anything and everything, regardless of reconditeness",
    	 $this->clean_html( $this->object->process("This is a paragraph with no embedded hyphenation hints and no hyphen-related CSS applied. Corporate gibberish follows. Think visionary. If you generate proactively, you may have to e-enable interactively. We apply the proverb \"Grass doesn't grow on a racetrack\" not only to our re-purposing but our power to matrix. If all of this comes off as dumbfounding to you, that's because it is! Our feature set is unparalleled in the industry, but our reality-based systems and simple use is usually considered a remarkable achievement. The power to brand robustly leads to the aptitude to embrace seamlessly. What do we streamline? Anything and everything, regardless of reconditeness") ) );
    	*/

    	$this->assertSame( 'A few words to hy&shy;phen&shy;ate, like KING&shy;desk. Re&shy;ally, there should be more hy&shy;phen&shy;ation here!',
    		$this->clean_html( $this->typo->process( 'A few words to hyphenate, like KINGdesk. Really, there should be more hyphenation here!' ) ) );
    }

    /**
     * @covers ::hyphenate
     */
    public function testHyphenate_headings_disabled()
    {
    	$this->typo->set_hyphenation( true );
    	$this->typo->set_hyphenation_language( 'en-US' );
    	$this->typo->set_min_length_hyphenation(2);
    	$this->typo->set_min_before_hyphenation(2);
    	$this->typo->set_min_after_hyphenation(2);
    	$this->typo->set_hyphenate_headings( false );
    	$this->typo->set_hyphenate_all_caps( true );
    	$this->typo->set_hyphenate_title_case( true ); // added in version 1.5
    	$this->typo->set_hyphenation_exceptions( array( 'KING-desk' ) );

    	$html = '<h2>A few words to hyphenate, like KINGdesk. Really, there should be no hyphenation here!</h2>';
    	$this->assertSame( $html, $this->clean_html( $this->typo->process( $html ) ) );
    }

    /**
     * @covers ::do_hyphenate
     * @covers ::hyphenation_pattern_injection
     */
    public function testDo_hyphenate()
    {
    	$this->typo->set_hyphenation( true );
    	$this->typo->set_hyphenation_language( 'de' );
    	$this->typo->set_min_length_hyphenation(2);
    	$this->typo->set_min_before_hyphenation(2);
    	$this->typo->set_min_after_hyphenation(2);
    	$this->typo->set_hyphenate_headings( false );
    	$this->typo->set_hyphenate_all_caps( true );
    	$this->typo->set_hyphenate_title_case( true ); // added in version 1.5

    	$tokens = array( array( 'value' => mb_convert_encoding( 'Änderungsmeldung', 'ISO-8859-2' ) ) );
    	$hyphenated  = $this->typo->do_hyphenate( $tokens );
	   	$this->assertEquals( $hyphenated, $tokens );

	   	$tokens = array( array( 'value' => 'Änderungsmeldung' ) );
	   	$hyphenated  = $this->typo->do_hyphenate( $tokens );
	   	$this->assertNotEquals( $hyphenated, $tokens );
    }

    /**
     * @covers ::do_hyphenate
     */
    public function testDo_hyphenate_no_title_case()
    {
    	$this->typo->set_hyphenation( true );
    	$this->typo->set_hyphenation_language( 'de' );
    	$this->typo->set_min_length_hyphenation(2);
    	$this->typo->set_min_before_hyphenation(2);
    	$this->typo->set_min_after_hyphenation(2);
    	$this->typo->set_hyphenate_headings( false );
    	$this->typo->set_hyphenate_all_caps( true );
    	$this->typo->set_hyphenate_title_case( false ); // added in version 1.5

    	$tokens = array( array( 'value' => 'Änderungsmeldung' ) );
    	$hyphenated  = $this->typo->do_hyphenate( $tokens );
    	$this->assertEquals( $tokens, $hyphenated);
    }

    /**
     * @covers ::do_hyphenate
     */
    public function testDo_hyphenate_invalid()
    {
    	$this->typo->set_hyphenation( true );
    	$this->typo->set_hyphenation_language( 'de' );
    	$this->typo->set_min_length_hyphenation(2);
    	$this->typo->set_min_before_hyphenation(2);
    	$this->typo->set_min_after_hyphenation(2);
    	$this->typo->set_hyphenate_headings( false );
    	$this->typo->set_hyphenate_all_caps( true );
    	$this->typo->set_hyphenate_title_case( false ); // added in version 1.5

    	$this->typo->settings['hyphenMinBefore'] = 0; // invalid value

    	$tokens = array( array( 'value' => 'Änderungsmeldung' ) );
    	$hyphenated  = $this->typo->do_hyphenate( $tokens );
    	$this->assertEquals( $tokens, $hyphenated);
    }

    /**
     * @covers ::hyphenate
     * @covers ::do_hyphenate
     */
    public function testHyphenate_no_custom_exceptions()
    {
    	$this->typo->set_hyphenation( true );
    	$this->typo->set_hyphenation_language( 'en-US' );
    	$this->typo->set_min_length_hyphenation(2);
    	$this->typo->set_min_before_hyphenation(2);
    	$this->typo->set_min_after_hyphenation(2);
    	$this->typo->set_hyphenate_headings( true );
    	$this->typo->set_hyphenate_all_caps( true );
    	$this->typo->set_hyphenate_title_case( true ); // added in version 1.5

    	$this->assertSame( 'A few words to hy&shy;phen&shy;ate, like KINGdesk. Re&shy;ally, there should be more hy&shy;phen&shy;ation here!',
    					   $this->clean_html( $this->typo->process( 'A few words to hyphenate, like KINGdesk. Really, there should be more hyphenation here!' ) ) );
    }

    /**
     * @covers ::hyphenate
     * @covers ::do_hyphenate
     */
    public function testHyphenate_no_exceptions_at_all()
    {
    	$this->typo->set_hyphenation( true );
    	$this->typo->set_hyphenation_language( 'en-US' );
    	$this->typo->set_min_length_hyphenation(2);
    	$this->typo->set_min_before_hyphenation(2);
    	$this->typo->set_min_after_hyphenation(2);
    	$this->typo->set_hyphenate_headings( true );
    	$this->typo->set_hyphenate_all_caps( true );
    	$this->typo->set_hyphenate_title_case( true ); // added in version 1.5
		$this->typo->settings['hyphenationPatternExceptions'] = array();
		unset( $this->typo->settings['hyphenationExceptions'] );

    	$this->assertSame( 'A few words to hy&shy;phen&shy;ate, like KINGdesk. Re&shy;ally, there should be more hy&shy;phen&shy;ation here!',
    					   $this->clean_html( $this->typo->process( 'A few words to hyphenate, like KINGdesk. Really, there should be more hyphenation here!' ) ) );
    }

    /**
     * @covers \PHP_Typography\PHP_Typography::get_settings_hash
     */
    public function testGet_settings_hash()
    {
    	$typo = $this->typo;

    	$typo->set_smart_quotes(true);
    	$hash1 = $typo->get_settings_hash(10);
    	$this->assertEquals( 10, strlen( $hash1 ) );

  		$typo->set_smart_quotes(false);
  		$hash2 = $typo->get_settings_hash(10);
  		$this->assertEquals( 10, strlen( $hash2 ) );

  		$this->assertNotEquals( $hash1, $hash2 );
    }

    /**
     * @covers ::save_state
     * @covers ::__construct
     * @covers ::init
     * @covers ::initialize_components
     * @covers ::initialize_patterns
     * @covers ::set_defaults
     */
    public function testSave_state()
    {
    	$this->typo->set_defaults();
    	$state = $this->typo->save_state();

    	$this->assertArrayHasKey( 'block_tags', $state );
    	$this->assertArrayHasKey( 'chr', $state );
    	$this->assertArrayHasKey( 'quote_styles', $state );
    	$this->assertArrayHasKey( 'str_functions', $state );
    	$this->assertArrayHasKey( 'components', $state );
    	$this->assertArrayHasKey( 'regex', $state );
    	$this->assertArrayHasKey( 'self_closing_tags', $state );
    	$this->assertArrayHasKey( 'inappropriate_tags', $state );
    	$this->assertArrayHasKey( 'settings', $state );

    	return $state;
    }

    /**
     * @covers ::load_state
     * @covers ::__construct
     * @covers ::set_defaults
     * @depends testSave_state
     */
    public function testLoad_state_OK( array $state )
    {
    	$this->typo->set_defaults(); // same as in testSave_state
    	$second_typo = new \PHP_Typography\PHP_Typography( false, 'lazy' );

    	$this->assertTrue( $second_typo->load_state( $state ) );
    	$this->assertEquals( serialize( $this->typo ), serialize( $second_typo ) );
    }

    /**
     * @covers ::load_state
     * @depends testSave_state
     */
    public function testLoad_state_NOK( array $state )
    {
    	// set up imperfect states
    	$states = array();

    	for ( $i = 0; $i < 8; ++$i ) {
    		$states[ $i ] = $state;
    	}
    	unset( $states[0]['chr'] );
    	unset( $states[1]['quote_styles'] );
    	unset( $states[2]['str_functions'] );
    	unset( $states[3]['components'] );
    	unset( $states[4]['regex'] );
    	unset( $states[5]['self_closing_tags'] );
    	unset( $states[6]['settings'] );
    	unset( $states[7]['block_tags'] );

    	// new, uninitialized PHP_Typography
    	$second_typo = new \PHP_Typography\PHP_Typography( false );

    	// load fixture with state
    	$this->assertTrue( $this->typo->load_state( $state ) );

    	foreach ( $states as $broken_state ) {
    		$this->assertFalse( $second_typo->load_state( $broken_state ) );
    		$this->assertNotEquals( serialize( $this->typo ), serialize( $second_typo ) );
    	}
    }
}

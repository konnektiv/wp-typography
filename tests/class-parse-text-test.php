<?php

require_once( __DIR__ . '/../php-typography/class-parse-text.php' );

// don't break without translation function
if ( ! function_exists( '__' ) ) {
	function &__( $string, $domain = null ) { return $string; }
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-11-09 at 22:55:19.
 */
class Parse_TextTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Parse_Text
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new \PHP_Typography\Parse_Text;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Parse_Text::load
     */
    public function testLoad()
    {
    	$too_long = 'A really long string with a word that is wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwway too long.';
    	$still_too_long = 'A really long string with a word that is aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalmost too long.';
    	$almost_too_long = 'A really long string with a word that is aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaalmost too long.';

    	$typo = $this->object;
    	
    	// security check
    	$this->assertFalse( $typo->load( $too_long ) );
    	$this->assertFalse( $typo->load( $still_too_long ) );
    	$this->assertTrue( $typo->load( $almost_too_long ) );
    	
    	$interesting = 'Quoth the raven, "nevermore"! Äöüß?';
    	$this->assertTrue( $typo->load( $interesting ) );
   
    	$tokens = $typo->get_all();
    	$this->assertCount(13, $tokens);
    	$this->assertArraySubset( array( 0 => array( 'type' => 'word', 'value' => 'Quoth' ) ), $tokens );
    	$this->assertArraySubset( array( 5 => array( 'type' => 'punctuation', 'value' => ',' ) ), $tokens );
    	$this->assertArraySubset( array( 11 => array( 'type' => 'word', 'value' => 'Äöüß' ) ), $tokens );
    	
    	return $typo;
    }

    /**
     * @covers Parse_Text::reload
     * @depends testLoad 
     */
    public function testReload( \PHP_Typography\Parse_Text $typo )
    {
    	$tokens = $typo->get_all();
    	$tokens[12]['value'] = ''; // ?
    	$tokens[11]['value'] = ''; // Äöüß
    	$tokens[10]['value'] = ''; //  
    	$tokens[9]['value'] .= '!';
    	$typo->update($tokens);
    	
    	$this->assertTrue( $typo->reload() );
    	$this->assertSame( 'Quoth the raven, "nevermore"!!', $typo->unload() );
    	
    	return $typo;
    }

    /**
     * @covers Parse_Text::unload
     */
    public function testUnload()
    {   	
    	$interesting = 'Quoth the raven, "nevermore"! Äöüß?';
    	$typo = $this->object;
    	
    	$this->assertTrue( $typo->load( $interesting ) );
    	
    	$result = $typo->unload();
    	
    	$this->assertSame( $interesting, $result );
    	$this->assertNotSame( $result, $typo->unload() ); // the parser is empty now.
    }

    /**
     * @covers Parse_Text::clear
     */
    public function testClear()
    {
    	$typo = $this->object;
    	$interesting = 'Quoth the raven, "nevermore"!';
    	
    	$this->assertTrue( $typo->load( $interesting ) );
		$this->assertGreaterThan( 0, count( $typo->get_all() ) );
		
		$typo->clear();
		$this->assertCount( 0, $typo->get_all() );
    }

    /**
     * @covers Parse_Text::update
     */
    public function testUpdate()
    {    
    	$typo = $this->object;
    	$interesting = 'Quoth the raven, "nevermore"! Äöüß?';
    	$this->assertTrue( $typo->load( $interesting ) );
    	
    	$tokens = $typo->get_all();
    	$tokens[12]['value'] = ''; // ?
    	$tokens[11]['value'] = ''; // Äöüß
    	$tokens[10]['value'] = ''; //  
    	$tokens[9]['value'] .= '!';
    	$typo->update($tokens);
    	
    	$this->assertSame( 'Quoth the raven, "nevermore"!!', $typo->unload() );
    	
    	return $typo;
    }

    /**
     * @covers Parse_Text::get_all
     */
    public function testGet_all()
    {
    	$interesting = 'Quoth the raven, "nevermore"!';
    	$typo = $this->object;
    	$this->assertTrue( $typo->load( $interesting ) );
   
    	$tokens = $typo->get_all();   	
    	$this->assertCount(10, $tokens);
    	
    	return $typo;
    }

    /**
     * @covers Parse_Text::get_spaces
     * @depends testGet_all
     */
    public function testGet_spaces( $typo )
    {
    	$tokens = $typo->get_spaces();    	
    	$this->assertCount(3, $tokens);
    	
    	return $typo;
    }

    /**
     * @covers Parse_Text::get_punctuation
     * @depends testGet_all
     */
    public function testGet_punctuation( $typo )
    {
    	$tokens = $typo->get_punctuation();    	
    	$this->assertCount(3, $tokens);
    	
    	return $typo;
    }

    /**
     * @covers Parse_Text::get_words
     * @depends testGet_all
     */
    public function testGet_words( $typo )
    {
    	$tokens = $typo->get_words();    	
    	$this->assertCount(4, $tokens);
    	
    	return $typo;
    }

    /**
     * @covers Parse_Text::get_other
     * @depends testGet_all
     */
    public function testGet_other( $typo )
    {
    	$tokens = $typo->get_other();
    	$this->assertCount(0, $tokens);
    	
    	return $typo;
    }

    /**
     * @covers Parse_Text::get_type
     * @depends testGet_all
     */
    public function testGet_type( $typo )
    {
		$words = array();
		$tokens = $typo->get_all();
		foreach ( $tokens as $token ) {
			if ( 'word' === $token['value'] ) {
				$words[] = $token;
			}
		}
		
		$this->assertArraySubset( $words, $typo->get_type('word') );
    }
}
